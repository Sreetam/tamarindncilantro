# -*- coding: utf-8 -*-
"""Adjacent_matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v8WweZncILdzqfQYFnaKlXWZ2erEq2ZI
"""

import pandas as pd  

    
# making dataframe  

df = pd.read_csv("nyc sheet - Sheet2.csv")  #reading csv

df

edgeList = df.values.tolist()

import pandas as pd
from geopy.distance import geodesic as GD 
  
# create an Empty DataFrame object With
# column names and indices 
d = pd.DataFrame(columns = g, index = g)   #creating dataframe using names of cities 
d=d.fillna(0)  #filling nan with zeroes
def Distance(lat1,long1,lat2,long2):   #calculation of distance using geopy
  a=(lat1,long1)
  b=(lat2,long2)
  return GD(a,b).km
edgeList = df.values.tolist()


for i in range(len(edgeList)):
  for j in range(len(edgeList)):
    x = Distance(edgeList[i][2],edgeList[i][3],edgeList[j][2],edgeList[j][3])
    
    d.at[edgeList[i][1],edgeList[j][1]] = x #appending to dataframe

d  #the adjacent matrix

import pandas as pd

g = {
   'A': ['A', 'B', 'C'],
   'B': ['A', 'C', 'E'],
   'C': ['A', 'B ', ' D '],
   # I added a comma here 'D': [' C ', ' E '],
   'E': [' B ', ' D ']
}

# clean up the example
g = {
   k: [v.strip() for v in vs]
   for k,
   vs in g.items()
}

edges = [(a, b) for a, bs in g.items() for b in bs]
print(edges)
df = pd.DataFrame(edges)
adj_matrix = pd.crosstab(df[0], df[1])







